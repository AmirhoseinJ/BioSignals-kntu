import math

import matplotlib
import matplotlib.pyplot as plt
import mne
import numpy
import numpy as np
import scipy
from sklearn import preprocessing

matplotlib.use('Qt5Agg')


class EEGHandler:
    def __init__(self, fs=250, type="edf",
                 edf_path="/run/media/cherry/C034E4D334E4CD8A/Users/PC/Desktop/prj/phase2/eog artifact articles/00008512_s009_t001.edf",
                 tdms_path="/home/cherry/VM_share/new/AmirhoseinJabbari1_Filtered.tdms", tdms_check_zero=False,
                 tdms_fs=250.0, tdms_scale=1):
        self.edf_path = edf_path
        self.tdms_path = tdms_path
        self.tdms_check_zero = tdms_check_zero
        self.tdms_fs = tdms_fs
        self.tdms_scale = tdms_scale
        self.fs = fs
        self.type = type

    def create_raw(self):
        import mne
        if self.type == 'edf':
            print("Loading EDF file...")
            self.raw = mne.io.read_raw_edf(self.edf_path, preload=True)
        elif self.type == "tdms":
            from nptdms import TdmsFile
            print("Loading TDMS file...")
            tdms_file = TdmsFile.read(self.tdms_path)
            channels_dict = {}
            for channel in tdms_file.groups()[0].channels():
                if self.tdms_check_zero:
                    if channel[:].astype("int").all() != 0:
                        channels_dict[channel.name] = channel[:]
                else:
                    channels_dict[channel.name] = channel[:]
            all_array_list = []
            for array in channels_dict.values():
                all_array_list.append(array * self.tdms_scale)
            info = mne.create_info(ch_names=list(channels_dict.keys()), ch_types="eeg", sfreq=self.tdms_fs)
            self.raw = mne.io.RawArray(all_array_list, info=info)
        else:
            print("Warning: Invalid options. Raw object not created.")
            self.raw = None
        return self.raw

    def create_montage(self, chnames_montage=None):
        import mne
        # if self.type == "edf":
        #     convention = "TUH"
        if self.type == "edf":
            if chnames_montage is None:
                chnames_montage = [
                    "FP1-F7",
                    "F7-T3",
                    "T3-T5",
                    "T5-O1",
                    "FP2-F8",
                    "F8-T4",
                    "T4-T6",
                    "T6-O2",
                    "A1-T3",
                    "T3-C3",
                    "C3-CZ",
                    "CZ-C4",
                    "C4-T4",
                    "T4-A2",
                    "FP1-F3",
                    "F3-C3",
                    "C3-P3",
                    "P3-O1",
                    "FP2-F4",
                    "F4-C4",
                    "C4-P4",
                    "P4-O2"
                ]
            montaged_channels_arrays = []
            for ch_montage in chnames_montage:
                two_channels = ch_montage.split("-")
                current_montage = self.raw["EEG " + two_channels[1] + "-REF"][0][0] - \
                                  self.raw["EEG " + two_channels[0] + "-REF"][0][0]
                montaged_channels_arrays.append(current_montage)
            self.raw_montaged = mne.io.RawArray(np.asarray(montaged_channels_arrays),
                                                info=mne.create_info(ch_names=chnames_montage, ch_types="eeg",
                                                                     sfreq=self.fs))
        elif self.type == "tdms":
            if chnames_montage is None:
                chnames_montage = [
                    "Fp1-F5",
                    "F5-Fc5",
                    "Fc5-C5",
                    "Fp2-F6",
                    "F6-Fc6",
                    "Fp1-F3",
                    "Fp2-F4"
                ]
            montaged_channels_arrays = []
            for ch_montage in chnames_montage:
                two_channels = ch_montage.split("-")
                current_montage = self.raw[two_channels[1]][0][0] - self.raw[two_channels[0]][0][0]
                montaged_channels_arrays.append(current_montage)
            self.raw_montaged = mne.io.RawArray(np.asarray(montaged_channels_arrays),
                                                info=mne.create_info(ch_names=chnames_montage, ch_types="eeg",
                                                                     sfreq=self.tdms_fs))
        else:
            print("Warning: Invalid options. Raw_montaged object not created.")
            self.raw_montaged = None
        return self.raw_montaged

    @staticmethod
    def farsi_reshape(string):
        import arabic_reshaper
        from bidi.algorithm import get_display
        string_reshaped = get_display(arabic_reshaper.reshape(string))
        return string_reshaped

    def filter_butterworth(self, channels=["Fp1"], range=None, butterworth_N=5, butterworth_wn=0.05,
                           use_montaged=False):
        import scipy.signal
        if use_montaged:
            if len(channels) == 1:
                numerator, denumerator = scipy.signal.butter(butterworth_N, butterworth_wn, output='ba')
                if range is not None:
                    butterworth_filtered = scipy.signal.filtfilt(numerator, denumerator,
                                                                 self.raw_montaged[channels[0]][0][0][
                                                                 range[0] * self.fs:range[
                                                                                        1] * self.fs],
                                                                 method="gust")
                else:
                    butterworth_filtered = scipy.signal.filtfilt(numerator, denumerator,
                                                                 self.raw_montaged[channels[0]][0][0],
                                                                 method="gust")
                return butterworth_filtered
            else:
                filtered_list = []
                for channel in channels:
                    numerator, denumerator = scipy.signal.butter(butterworth_N, butterworth_wn, output='ba')
                    if range is not None:
                        butterworth_filtered = scipy.signal.filtfilt(numerator, denumerator,
                                                                     self.raw_montaged[channel][0][0][
                                                                     range[0] * self.fs:range[
                                                                                            1] * self.fs],
                                                                     method="gust")
                    else:
                        butterworth_filtered = scipy.signal.filtfilt(numerator, denumerator,
                                                                     self.raw_montaged[channel][0][0],
                                                                     method="gust")
                    filtered_list.append(butterworth_filtered)
                return filtered_list
        else:
            if len(channels) == 1:
                numerator, denumerator = scipy.signal.butter(butterworth_N, butterworth_wn, output='ba')
                if range is not None:
                    butterworth_filtered = scipy.signal.filtfilt(numerator, denumerator, self.raw[channels[0]][0][0][
                                                                                         range[0] * self.fs:range[
                                                                                                                1] * self.fs],
                                                                 method="gust")
                else:
                    butterworth_filtered = scipy.signal.filtfilt(numerator, denumerator, self.raw[channels[0]][0][0],
                                                                 method="gust")
                return butterworth_filtered
            else:
                filtered_list = []
                for channel in channels:
                    numerator, denumerator = scipy.signal.butter(butterworth_N, butterworth_wn, output='ba')
                    if range is not None:
                        butterworth_filtered = scipy.signal.filtfilt(numerator, denumerator, self.raw[channel][0][0][
                                                                                             range[0] * self.fs:range[
                                                                                                                    1] * self.fs],
                                                                     method="gust")
                    else:
                        butterworth_filtered = scipy.signal.filtfilt(numerator, denumerator, self.raw[channel][0][0],
                                                                     method="gust")
                    filtered_list.append(butterworth_filtered)
                return filtered_list

    @staticmethod
    def beauty_plot(arrays, times, titles, xlabel=farsi_reshape("زمان (ثانیه)"), ylabel=farsi_reshape("اندازه (ولت)"),
                    xlims=None, ylims=None, data_label="label", style="seaborn", linewidth=1.2, main_font='Roboto',
                    legend_frame=True, line_color='black',
                    title_fontsize=16, title_fontweight="bold", title_color="#5c1d6b", title_pad=20,
                    label_color="#056385", legend_label="", suptitle="",
                    xlabel_fontsize=14, ylabel_fontsize=14, xlabel_pad=15, ylabel_pad=10, label_font="B Nazanin",
                    hightlight_dict=None, highlight_color="#b2d9d5", highlight_alpha=0.4
                    , sup_fontfamily="Roboto", sup_fontsize=24, sup_color="black"):
        with plt.style.context(style):
            with plt.rc_context({'lines.linewidth': linewidth, 'lines.linestyle': '-', 'font.family': [main_font],
                                 'legend.frameon': legend_frame}):
                matplotlib.rcParams['text.latex.preamble'] = [r"\usepackage{amsmath}"]
                font = matplotlib.font_manager.FontProperties(family='B Nazanin',
                                                              weight='bold',
                                                              style='normal', size=10)
                fig, axs = plt.subplots(len(arrays), squeeze=False)
                fig.suptitle(suptitle, fontfamily=sup_fontfamily, fontsize=sup_fontsize, color=sup_color)
                for i, array in enumerate(arrays):
                    axs.flat[i].plot(times[i], arrays[i], color=line_color)
                    axs.flat[i].set_title(titles[i], fontsize=title_fontsize, fontweight=title_fontweight,
                                          color=title_color, pad=title_pad)
                    axs.flat[i].set_xlabel(xlabel, fontfamily=label_font, fontsize=xlabel_fontsize, labelpad=xlabel_pad,
                                           color=label_color)
                    axs.flat[i].set_ylabel(ylabel, fontfamily=label_font, fontsize=ylabel_fontsize, labelpad=ylabel_pad,
                                           color=label_color)
                    if ylims is not None:
                        axs.flat[i].set_ylim(ylims[i])
                    if xlims is not None:
                        axs.flat[i].set_xlim(xlims[i])
                    axs.flat[i].yaxis.set_major_formatter(matplotlib.ticker.ScalarFormatter(useMathText=True))
                    axs.flat[i].annotate(data_label, xy=(times[i][0], 0), xytext=(1, 0), xycoords='data',
                                         textcoords='axes fraction',
                                         horizontalalignment='right', verticalalignment='bottom', fontsize=8)
                    if hightlight_dict is not None:
                        for j, coors in enumerate(hightlight_dict.values()):
                            axs.flat[j].axvspan(coors[0], coors[1], color=highlight_color, alpha=highlight_alpha,
                                                label=legend_label)
                        axs.flat[i].legend(prop=font, facecolor='white', framealpha=1)
                fig.tight_layout()
                # https://stackoverflow.com/questions/26084231/draw-a-separator-or-lines-between-subplots
                # Get the bounding boxes of the axes including text decorations
                r = fig.canvas.get_renderer()
                get_bbox = lambda ax: ax.get_tightbbox(r).transformed(fig.transFigure.inverted())
                bboxes = np.array(list(map(get_bbox, axs.flat)), mtrans.Bbox).reshape(axs.shape)

                # Get the minimum and maximum extent, get the coordinate half-way between those
                ymax = np.array(list(map(lambda b: b.y1, bboxes.flat))).reshape(axs.shape).max(axis=1)
                ymin = np.array(list(map(lambda b: b.y0, bboxes.flat))).reshape(axs.shape).min(axis=1)
                ys = np.c_[ymax[1:], ymin[:-1]].mean(axis=1)

                # Draw a horizontal lines at those coordinates
                for y in ys:
                    line = plt.Line2D([0, 1], [y, y], transform=fig.transFigure, color="black", linestyle="dotted")
                    fig.add_artist(line)

    class coordinates_saver():
        def __init__(self, times, array):
            self.times = times
            self.array = array
            self.coord_dict = {}
            self.coord_list = []
            self.curr_coord = 0

        def onclick(self, event):
            global ix
            ix = event.xdata
            print('x = %1.2f' % (ix))
            self.coord_list.append(ix)
            if len(self.coord_list) == 2:
                print(self.coord_list)
                self.coord_dict[self.curr_coord] = self.coord_list
                print(self.coord_dict)
                self.curr_coord += 1
                self.coord_list = []

        def coord_plot(self):
            self.coord_list = []
            self.coord_dict = {}
            self.curr_coord = 0
            fig, ax = plt.subplots(1)
            cid = fig.canvas.mpl_connect('button_press_event', self.onclick)
            ax.plot(self.times, self.array)
            plt.show(block=True)
            return self.coord_dict


################# 1. Show Muscle Artifacts

handle_bspkntu = EEGHandler(type="tdms")
handle_tuh = EEGHandler(type="edf")

raw = handle_tuh.create_raw()
raw.info

raw_bsp = handle_bspkntu.create_raw().crop(15)
raw_bsp_montaged = handle_bspkntu.create_montage()
raw_bsp.info
raw.plot_psd()

raw_mont = handle_tuh.create_montage()

raw_bsp.notch_filter(50)
raw_bsp.notch_filter([51, 101])

threshold_muscle = 4  # z-score
# Choose one channel type, if there are axial gradiometers and magnetometers,
# select magnetometers as they are more sensitive to muscle activity.
annot_muscle, scores_muscle = mne.preprocessing.annotate_muscle_zscore(
    raw_bsp, ch_type="eeg", threshold=threshold_muscle, min_length_good=0.2,
    filter_freq=[100, 124])

fig, ax = plt.subplots()
ax.plot(raw_bsp.times, scores_muscle)
ax.axhline(y=threshold_muscle, color='r')
ax.set(xlabel='time, (s)', ylabel='zscore', title='Muscle activity')

order = np.arange(1, 2)
raw_bsp.set_annotations(annot_muscle)
raw_bsp.plot(start=5, duration=20, order=order)

raw_bsp[9]

start = 110
stop = 170
F5_Fc5_channel_butter = preprocessing.scale(
    handle.filter_butterworth(butterworth_wn=0.10, butterworth_N=2, range=(start, stop), channels=["F5-Fc5"],
                              use_montaged=True))

EEGHandler.beauty_plot(arrays=[F5_Fc5_channel_butter], times=[np.arange(0, len(F5_Fc5_channel_butter)) / 250.0 + start],
                       titles=["F5"])

# ICA
ica = mne.preprocessing.ICA(n_components=len(raw_mont.ch_names), max_iter='auto', random_state=5648)
ica.fit(raw_mont)
ica.plot_sources(raw_mont, show_scrollbars=True)
ica.exclude = [1, 2, 4]
raw_mont_ica = raw_mont.copy()
ica.apply(raw_mont_ica)

numerator, denumerator = scipy.signal.butter(4, 0.04, output='ba')
butterworth_filtered = scipy.signal.filtfilt(numerator, denumerator,
                                             raw_mont_ica["F5-Fc5"][0][0][start * 250:stop * 250], method="gust")

plt.plot(butterworth_filtered)

####################2. EEG Bands


import neurokit2 as nk

# Generate 10 seconds of EMG signal (recorded at 250 samples / second)
emg = nk.emg_simulate(duration=10, sampling_rate=250, burst_number=3)

# Process it
signals, info = nk.emg_process(emg, sampling_rate=250)

# Visualise the processing
nk.emg_plot(signals, sampling_rate=250)

################### 3. ERG


# no. 325
# healthy

series_photopic_healthy = "1.238363097399997e-06,1.2277633913981845e-06,1.219515525008319e-06,1.2155004469605046e-06,1.2175423762528226e-06,1.2273685570107773e-06,1.2465707186493091e-06,1.2765660812874557e-06,1.3185615443944698e-06,1.3735201491726912e-06,1.4421300420508487e-06,1.5247784403982223e-06,1.6215288951570983e-06,1.732104010443436e-06,1.8558731653683935e-06,1.9918461475754157e-06,2.1386726984928828e-06,2.294647401868133e-06,2.4577225303801242e-06,2.6255252123519313e-06,2.7953819881076925e-06,2.964348823297769e-06,3.1292468065657886e-06,3.286702622062876e-06,3.4331956157984678e-06,3.565106453606859e-06,3.678770781334606e-06,3.7705367503804155e-06,3.836822088487679e-06,3.874175035889493e-06,3.879332780343248e-06,3.84928307539667e-06,3.7813208564330125e-06,3.6731041745952098e-06,3.5227076295996085e-06,3.3286701182078104e-06,3.0900378078513313e-06,2.8064034722774522e-06,2.4779360501270276e-06,2.10540633815981e-06,1.6902026800380554e-06,1.2343398338998668e-06,7.40459199732868e-07,2.118199375900076e-07,-3.477180712252448e-07,-9.337202300230274e-07,-1.541212213851395e-06,-2.1647226731147384e-06,-2.7983346626569983e-06,-3.4357440199528355e-06,-4.070324393978808e-06,-4.695199550042162e-06,-5.303319085214753e-06,-5.887541192350909e-06,-6.440715878852643e-06,-6.95577182341367e-06,-7.4258064159948844e-06,-7.844171705073677e-06,-8.204563528124709e-06,-8.501106094627175e-06,-8.728430657356512e-06,-8.881757821654901e-06,-8.956963938544504e-06,-8.950648407335393e-06,-8.86019097379176e-06,-8.683796295372304e-06,-8.420540325460024e-06,-8.070393050729763e-06,-7.634240319021046e-06,-7.113891570043052e-06,-6.512077561637852e-06,-5.832435363117838e-06,-5.0794828894140664e-06,-4.258582976035541e-06,-3.3758960853447206e-06,-2.438323235764983e-06,-1.4534398360410705e-06,-4.29419173997303e-07,6.250502337934449e-07,1.7008557051667594e-06,2.7885562303708866e-06,3.8784842217864934e-06,4.9608488552621566e-06,6.025845323165413e-06,7.063759312586626e-06,8.0650770541979e-06,9.020588549901731e-06,9.921492164721712e-06,1.0759490578493569e-05,1.1526884009072091e-05,1.2216656614327803e-05,1.2822551070712507e-05,1.3339140423340723e-05,1.3761886293650605e-05,1.4087185263633728e-05,1.4312408893601969e-05,1.4435929188039154e-05,1.445712950953748e-05,1.4376410945260432e-05,1.4195178664522246e-05,1.391582190990448e-05,1.354167761746794e-05,1.3076991308480501e-05,1.252685524377739e-05,1.1897148397110868e-05,1.119446096708998e-05,1.0426010703667998e-05,9.59955923462985e-06,8.723312021174934e-06,7.805825589457527e-06,6.855900664959336e-06,5.882483037566999e-06,4.894556241197279e-06,3.901039690390462e-06,2.9106893180141924e-06,1.931996848725248e-06,9.731004411150934e-07,4.169518419416818e-08,-8.550455845579563e-07,-1.7105429606090183e-06,-2.5188758172589587e-06,-3.274835080446792e-06,-3.973967523052124e-06,-4.612609700416215e-06,-5.187911028770031e-06,-5.697844699170673e-06,-6.1412101786118e-06,-6.517623205581913e-06,-6.827494871686213e-06,-7.072002517816145e-06,-7.2530488068878185e-06,-7.373215794359567e-06,-7.435706265823683e-06,-7.4442818913667e-06,-7.403193194477353e-06,-7.317105428228388e-06,-7.191020813479554e-06,-7.0301962296071e-06,-6.840063178970013e-06,-6.626142294408055e-06,-6.393963758455357e-06,-6.148985903564608e-06,-5.8965192692994606e-06,-5.6416533880110364e-06,-5.389189482229995e-06,-5.143578619026812e-06,-4.908867595077027e-06,-4.688650278694695e-06,-4.486030320549617e-06,-4.303587957110722e-06,-4.14336000176263e-06,-4.006824383395724e-06,-3.89489832741674e-06,-3.807940629485529e-06,-3.745765752682928e-06,-3.707665882757283e-06,-3.6924391224602005e-06,-3.6984258713346208e-06,-3.723552708834177e-06,-3.7653805975423893e-06,-3.821158315986395e-06,-3.887879756803159e-06,-3.962345545005519e-06,-4.041226020490285e-06,-4.121122856304282e-06,-4.198636361252284e-06,-4.2704241423052736e-06,-4.333266588218976e-06,-4.38412143921596e-06,-4.4201797209098e-06,-4.438915311766323e-06,-4.4381308725860436e-06,-4.415992862050189e-06,-4.371068371256115e-06,-4.3023464968428016e-06,-4.2092592593689915e-06,-4.091690243512858e-06,-3.949980055040214e-06,-3.784919726967928e-06,-3.5977400330011733e-06,-3.390093297639396e-06,-3.1640270208299626e-06,-2.921952273027273e-06,-2.666606860657339e-06,-2.401011442998424e-06,-2.128423830072279e-06,-1.8522874825066538e-06,-1.576177851347893e-06,-1.3037479220656678e-06,-1.0386708026999258e-06,-7.845834488762193e-07,-5.450301614473574e-07,-3.2340872735403536e-07,-1.2291772577555093e-07,5.3492257734433224e-08,2.0316365123562719e-07,3.237726104998728e-07,4.133643471959658e-07,4.703827301000274e-07,4.936941877531353e-07,4.826047756978369e-07"
series_scotopic_healthy = "1.7222630503965775e-06,1.654250581850647e-06,1.5845425878069364e-06,1.5126759080885677e-06,1.4389329408004414e-06,1.363326987302571e-06,1.2859851494795294e-06,1.2068779824403464e-06,1.1264802424193476e-06,1.0453990171299665e-06,9.632173032514402e-07,8.805872084849398e-07,7.975522180458938e-07,7.142605227272725e-07,6.308459319370741e-07,5.475244506669696e-07,4.64259017007862e-07,3.8119000578262785e-07,2.984075138101616e-07,2.1640049396864924e-07,1.352757692529849e-07,5.535028435588174e-08,-2.3667448445507944e-08,-1.0117871340753481e-07,-1.7756485704012448e-07,-2.5268042236348265e-07,-3.2645849046275544e-07,-3.987614149991714e-07,-4.695388042819104e-07,-5.387929036260175e-07,-6.058547796783387e-07,-6.711982223350788e-07,-7.34401282898034e-07,-7.955232490530761e-07,-8.547357310817461e-07,-9.121780522036715e-07,-9.679118875283166e-07,-1.0221419870504178e-06,-1.0747564829216572e-06,-1.125827111536637e-06,-1.17531430987583e-06,-1.2232274002599297e-06,-1.268741016247077e-06,-1.3123946018822608e-06,-1.353867673969944e-06,-1.3933223499407177e-06,-1.4310387541627279e-06,-1.467663992116286e-06,-1.5031583870950271e-06,-1.5373867654489004e-06,-1.570956328578177e-06,-1.603524310667126e-06,-1.6354055105693988e-06,-1.666542061684595e-06,-1.6968285763141466e-06,-1.7260107370020705e-06,-1.7540357930556638e-06,-1.781017886059999e-06,-1.8075539855999523e-06,-1.833886130953033e-06,-1.8600414932734566e-06,-1.8856924270949094e-06,-1.911011395350215e-06,-1.9351853097759886e-06,-1.9587541828514077e-06,-1.9816766325675417e-06,-2.0040033632540144e-06,-2.0256009065633407e-06,-2.046810550382361e-06,-2.067744162559393e-06,-2.0877002953056945e-06,-2.106997271766886e-06,-2.125130322383484e-06,-2.1420880784717156e-06,-2.157701601390727e-06,-2.171759660996031e-06,-2.1841024135937914e-06,-2.1949988422420574e-06,-2.204348447776283e-06,-2.2120443645690102e-06,-2.2177375740284333e-06,-2.221265276602935e-06,-2.2219817310542567e-06,-2.2201440970093245e-06,-2.215552058260073e-06,-2.2079984773881733e-06,-2.197270760007086e-06,-2.1831517642567633e-06,-2.165420028177323e-06,-2.143851361324778e-06,-2.1182195268920623e-06,-2.088297151203733e-06,-2.053857542705373e-06,-2.014674464589916e-06,-1.9705241811607266e-06,-1.921187049447326e-06,-1.8664468370843679e-06,-1.8060936781694181e-06,-1.7399243006366305e-06,-1.6677433904987993e-06,-1.589364501342061e-06,-1.5046115322547848e-06,-1.4133195236354368e-06,-1.3153359077477944e-06,-1.2105210771551356e-06,-1.0987500900228042e-06,-9.799131248655613e-07,-8.539164468857052e-07,-7.206833743111929e-07,-5.801550742035033e-07,-4.3229113089182647e-07,-2.770703702026367e-07,-1.1449149184272756e-07,5.5426532696856157e-08,2.3264388460120244e-07,4.1709955667101895e-07,6.087111046326754e-07,8.073742492342717e-07,1.0129630254596123e-06,1.2253293562025647e-06,1.4443035070144106e-06,1.669693915573589e-06,1.9012873053725343e-06,2.138849367838702e-06,2.382125103395083e-06,2.6308384803996887e-06,2.884694367821794e-06,3.14337785312091e-06,3.4065558338625124e-06,3.673877472465392e-06,3.944975105696358e-06,4.219465608912287e-06,4.496950168686453e-06,4.777016329171602e-06,5.059240265836706e-06,5.343185421224916e-06,5.628405688185012e-06,5.914445409871405e-06,6.200842562975595e-06,6.487128302978817e-06,6.7728292378888e-06,7.057468337734463e-06,7.340567663050024e-06,7.621648364875e-06,7.90023295849096e-06,8.17584714241093e-06,8.44801888888469e-06,8.716285265109036e-06,8.980186976259574e-06,9.239274731953628e-06,9.493110155744944e-06,9.741264875628985e-06,9.983325071516447e-06,1.0218887837254442e-05,1.044756754708942e-05,1.0668995855667163e-05,1.0882820788538083e-05,1.1088709470641334e-05,1.1286348126304802e-05,1.1475444807729218e-05,1.1655727575998753e-05,1.1826947229565121e-05,1.1988879123236984e-05,1.2141319530201145e-05,1.2284090189496055e-05,1.2417037396517117e-05,1.2540032003016677e-05,1.2652969417104032e-05,1.2755772331729531e-05,1.2848386177211069e-05,1.2930781849718187e-05,1.3002956620766781e-05,1.3064933227724396e-05,1.3116756235831417e-05,1.3158495676179882e-05,1.3190246136218775e-05,1.3212124940764625e-05,1.3224269423517399e-05,1.3226842384028714e-05,1.3220024811744224e-05,1.320401770499302e-05,1.3179041161492933e-05,1.3145334378350526e-05,1.3103152014082298e-05,1.3052765098109376e-05,1.2994458302273415e-05,1.2928530850331299e-05,1.2855292879976332e-05,1.2775064533343539e-05,1.2688177775999065e-05,1.259497003047727e-05,1.2495786904764827e-05,1.2390977644827217e-05,1.2280896044103429e-05,1.216589953401126e-05,1.2046345545968506e-05,1.1922589692403562e-05,1.1794988495239522e-05,1.1663893928925972e-05,1.1529655239428394e-05,1.1392614396754652e-05,1.1253107004449703e-05,1.1111461390100885e-05,1.0967996786348522e-05,1.0823023330885917e-05,1.0676836609491147e-05,1.0529724931984674e-05,1.038196114677703e-05,1.0233803550363518e-05,1.008549861580832e-05,9.93727553577628e-06,9.789348951017018e-06,9.641918950364925e-06,9.49516561377095e-06,9.349254469270818e-06,9.204334673995618e-06,9.060535376193002e-06,8.917972081690095e-06,8.776740287430584e-06,8.63691730046412e-06,8.498567694914527e-06,8.361735126527492e-06,8.226447789638769e-06,8.092718417174183e-06,7.960544280649628e-06,7.829906280676369e-06,7.70077167544514e-06,7.573093171231449e-06,7.446811650879681e-06,7.321853900066344e-06,7.198136700026225e-06,7.075564553815639e-06,6.954033324291231e-06,6.833429779362632e-06,6.713632046739804e-06,6.594512797164498e-06,6.475937880168203e-06,6.357768597808899e-06,6.239861704671057e-06,6.122073045844445e-06,6.004255283187376e-06,5.886261078558164e-06,5.767943548562471e-06,5.649157628795365e-06,5.529759619093966e-06,5.409610821516253e-06,5.2885761760990135e-06,5.1665260798472445e-06,5.043337750976207e-06,4.918894319416722e-06,4.793088464793982e-06,4.665820142690791e-06,4.536999767879024e-06,4.406547304824926e-06,4.274393177183811e-06,4.140479177294765e-06,4.0047593756753486e-06,3.867198756779544e-06,3.7277754927345086e-06,3.5864800338458735e-06,3.4433157907187706e-06,3.2982991342578316e-06,3.151459395667189e-06,3.00283909382415e-06,2.852493935279199e-06,2.700491450013942e-06,2.5469132651778637e-06,2.391851921856869e-06,2.235412921436364e-06,2.0777129066118505e-06,1.9188798887626035e-06,1.7590522247701301e-06,1.5983786170181702e-06,1.437016976524319e-06,1.2751340818795143e-06,1.112904669753334e-06,9.505108664598083e-07,7.881412216192984e-07,6.259898555072141e-07,4.642558621981152e-07,3.0314214427562547e-07,1.4285464544627757e-07,-1.639856606061585e-08,-1.744083277799291e-07,-3.30965150396878e-07,-4.858603688262519e-07,-6.388868882822862e-07,-7.89840271409048e-07,-9.385195767208643e-07,-1.0847282965187333e-06,-1.228275323228445e-06,-1.3689756315216073e-06,-1.506651301497186e-06,-1.6411323713327874e-06,-1.772257292032009e-06,-1.899874064292817e-06,-2.02384103431541e-06,-2.1440266664285446e-06,-2.260311475765775e-06,-2.3725872324575903e-06,-2.4807591216813307e-06,-2.5847441520454595e-06,-2.684473201952642e-06,-2.779891019599745e-06,-2.8709557682304876e-06,-2.9576401630038163e-06,-3.039931243620231e-06,-3.117829919574433e-06,-3.1913525617710548e-06,-3.26052941090893e-06,-3.325405259602121e-06,-3.3860387702588923e-06,-3.442503384576412e-06,-3.4948857319250237e-06,-3.543286084095598e-06,-3.5878183552995324e-06,-3.628608055805671e-06,-3.6657938835560344e-06,-3.6995256778027397e-06,-3.729964646481676e-06,-3.7572822293441277e-06,-3.7816598705830984e-06,-3.803287881964934e-06,-3.8223652154556476e-06,-3.839098098978866e-06,-3.853699581668479e-06,-3.866388851747615e-06,-3.8773905544076115e-06,-3.886932063323911e-06,-3.895245754392818e-06,-3.902565822500037e-06,-3.909127372025978e-06,-3.91516641684575e-06,-3.920919425581815e-06,-3.926620593119878e-06,-3.932502295356244e-06,-3.938793724955758e-06,-3.945720891351812e-06,-3.9535034375148825e-06,-3.962356913689291e-06,-3.972489594161743e-06,-3.984102477261331e-06,-3.99738837586483e-06,-4.0125319173967e-06,-4.029707724839682e-06,-4.049080416734796e-06,-4.070803697686642e-06,-4.095020358363399e-06,-4.121860001760069e-06,-4.151441771682585e-06,-4.183870714769e-06,-4.219238235236844e-06,-4.257623913872521e-06,-4.299091415305156e-06,-4.343691671238048e-06,-4.3914610614592675e-06,-4.4424209590943065e-06,-4.496579549595481e-06,-4.553928192763124e-06,-4.614446424966445e-06,-4.6780974116700236e-06,-4.744831585412612e-06,-4.8145830078283325e-06,-4.887274371867534e-06,-4.962813818565337e-06,-5.041095391788986e-06,-5.122000857227249e-06,-5.205400611885125e-06,-5.2911518650944345e-06,-5.379100002755877e-06,-5.469080861075781e-06,-5.560918452829355e-06,-5.65442860533949e-06,-5.749416686740005e-06,-5.8456803344597574e-06,-5.943009909969987e-06,-6.041188044036971e-06,-6.139991455711424e-06,-6.239191861823201e-06,-6.338555976981297e-06,-6.4378468778159e-06,-6.536824457725743e-06,-6.635246791120153e-06,-6.7328701334190555e-06,-6.829450740042375e-06,-6.9247448664100375e-06,-7.01851058693137e-06,-7.1105073402577545e-06,-7.200497293524677e-06,-7.288247161341133e-06,-7.373526841547573e-06,-7.456112598447362e-06,-7.535785698564723e-06,-7.612335593876196e-06,-7.68555673857918e-06,-7.755254955554847e-06,-7.821241524652578e-06,-7.88334000390023e-06,-7.941382136777975e-06,-7.995211490197107e-06,-8.04468072601594e-06,-8.089657967502717e-06,-8.130019523377996e-06,-8.165656254277565e-06,-8.196472663257737e-06,-8.22238507680595e-06,-8.243323463830166e-06,-8.25923325464828e-06,-8.27007261250401e-06,-8.275814252556302e-06,-8.276446351374034e-06,-8.27197072794661e-06,-8.26240375317866e-06,-8.247776349890046e-06,-8.22813581180526e-06,-8.203541256079916e-06,-8.174068170774262e-06,-8.139805686369073e-06,-8.100857485260349e-06,-8.05734089226462e-06,-8.009435077838134e-06,-7.957178240758367e-06,-7.900646778580267e-06,-7.840271791792475e-06,-7.776023267069831e-06,-7.708190423727501e-06,-7.636432201252319e-06,-7.561804977740394e-06,-7.484215075237444e-06,-7.404018106171861e-06,-7.321602879528655e-06,-7.237106729007792e-06,-7.150794772314839e-06,-7.062795702950098e-06,-6.973132713028463e-06,-6.882043635414448e-06,-6.790037332393695e-06,-6.697400294797262e-06,-6.604216196137713e-06,-6.511393166874768e-06,-6.419160854420625e-06,-6.327967639663257e-06,-6.238287824089639e-06,-6.15000271864119e-06,-6.0630727602983825e-06,-5.9774388319056015e-06,-5.894012701901374e-06,-5.812491508550011e-06,-5.733730176871177e-06,-5.657915153278736e-06,-5.58506735615083e-06,-5.515542852663202e-06,-5.4495967560797e-06,-5.3874273362453096e-06,-5.329251052899053e-06,-5.275189778330969e-06,-5.225408131082077e-06,-5.180018433748046e-06,-5.139513177709887e-06,-5.103865987621248e-06,-5.073845841252478e-06,-5.049471383244963e-06,-5.030800821259618e-06,-5.018182946514571e-06,-5.011482244299259e-06,-5.010965196561301e-06,-5.016055183659773e-06,-5.027496172260726e-06,-5.044922090746695e-06,-5.068406153441174e-06,-5.098168458061991e-06,-5.134218554303516e-06,-5.176657850824995e-06,-5.225542736297939e-06,-5.280477125779726e-06,-5.341529231372988e-06,-5.4087277021608315e-06,-5.481781499838689e-06,-5.56020768271992e-06,-5.644666998705361e-06,-5.7347247093275655e-06,-5.830147074448178e-06,-5.930908173468197e-06,-6.03671423959895e-06,-6.14748387306463e-06,-6.262982878979528e-06,-6.383613708749181e-06,-6.5084041125373915e-06,-6.637554179178551e-06,-6.77066464049858e-06,-6.907355327712139e-06,-7.047385224723257e-06,-7.190394171630032e-06,-7.3360192800464574e-06,-7.484214165742742e-06,-7.634689609403722e-06,-7.787059075781144e-06,-7.940890100144316e-06,-8.096099008980673e-06,-8.251787221524864e-06,-8.408320354647003e-06"
csv_photopic_healthy = np.array(series_photopic_healthy.split(",")).astype("float")
times_p_healthy = np.arange(0.5, (len(csv_photopic_healthy) + 1) / 2, 0.5)
csv_scotopic_healthy = np.array(series_scotopic_healthy.split(",")).astype("float")
times_s_healthy = np.arange(0.5, (len(csv_scotopic_healthy) + 1) / 2, 0.5)

EEGHandler.beauty_plot(arrays=[csv_photopic_healthy, csv_scotopic_healthy], times=[times_p_healthy, times_s_healthy],
                       titles=["Healthy Photopic Response", "Healthy Scotopic Response"]
                       , xlabel=EEGHandler.farsi_reshape("زمان (میلی ثانیه)"),
                       data_label="Sample 325, $\it{Pediatric}$ $\it{and}$ $\it{adults}$ $\it{ERG}$ Dataset")

# no. 319
# Retinal cone-rod dystrophy

series_scotopic_patient = "2.5718998131196713e-06,2.5498561626591254e-06,2.527035121602239e-06,2.503428731870372e-06,2.479108388797613e-06,2.454004743412952e-06,2.4280507204821333e-06,2.401307256150176e-06,2.3737327410344733e-06,2.3452562345482875e-06,2.3158352178143105e-06,2.2853855625726283e-06,2.2538845314556966e-06,2.2213732790987706e-06,2.187893187510781e-06,2.1534713141591055e-06,2.1180010207899613e-06,2.0815218704228755e-06,2.0440452317416202e-06,2.00567865249468e-06,1.9664448700495996e-06,1.926349341374589e-06,1.8853589835998719e-06,1.8434948287904263e-06,1.8006845721174614e-06,1.757015297698672e-06,1.7125340718848747e-06,1.6672232732162229e-06,1.6212803757298389e-06,1.5747732504678424e-06,1.5276889371307334e-06,1.4800377812207444e-06,1.4320052059701993e-06,1.3836679499945603e-06,1.3351852885534754e-06,1.2866507859143894e-06,1.238020900018455e-06,1.1893126838913304e-06,1.140667677645979e-06,1.0921263537966297e-06,1.0438225217512809e-06,9.959900353351259e-07,9.487629881732573e-07,9.021354685501137e-07,8.562476523366058e-07,8.111848046610248e-07,7.66980292610242e-07,7.237504746626655e-07,6.816645736762439e-07,6.409637194337847e-07,6.01738577188371e-07,5.641974212267087e-07,5.284046551423671e-07,4.944646434523747e-07,4.6242189455369953e-07,4.3223352008681104e-07,4.0410674273516634e-07,3.782350574965676e-07,3.547175992935081e-07,3.336592158120766e-07,3.1523865118288086e-07,2.9957539027236635e-07,2.8668279128396534e-07,2.764927558018826e-07,2.690866836019268e-07,2.6463888502803457e-07,2.632554298998002e-07,2.649267401011457e-07,2.6959557430927816e-07,2.772928553440579e-07,2.8808787533307623e-07,3.0203614187485073e-07,3.192225221937406e-07,3.396177703507419e-07,3.6331744013295975e-07,3.9039827015585615e-07,4.2075947703779093e-07,4.5426699557538086e-07,4.908993105345871e-07,5.30612396687502e-07,5.733272132601996e-07,6.190015255924664e-07,6.676660859739059e-07,7.192555244728283e-07,7.736992984064273e-07,8.309199870382145e-07,8.908334621082759e-07,9.533488878332719e-07,1.018369289340626e-06,1.0857917231987813e-06,1.155507447947457e-06,1.2274024356884183e-06,1.30135720155522e-06,1.3772481679552584e-06,1.4549466413882328e-06,1.5343205177487107e-06,1.6152334865182638e-06,1.6975462813206832e-06,1.7811165662351414e-06,1.8657996179172187e-06,1.951448439285741e-06,2.037914327956969e-06,2.1250471036182716e-06,2.2126960175228305e-06,2.3007091840554494e-06,2.3889349449746078e-06,2.4772214146651095e-06,2.5654178443801356e-06,2.6533739401202183e-06,2.7409405447542667e-06,2.8279703201405937e-06,2.9143177471269155e-06,2.9998398076713784e-06,3.0843950753478566e-06,3.1678462164563825e-06,3.2500574889127165e-06,3.330897698106128e-06,3.410238377909991e-06,3.4879551549238386e-06,3.563927066352335e-06,3.6380376968736527e-06,3.7101747238921234e-06,3.7802301449119113e-06,3.848100277537014e-06,3.913686214218615e-06,3.976893822255079e-06,4.037633061670931e-06,4.095819349458907e-06,4.151371740590548e-06,4.204216111247661e-06,4.254280611348804e-06,4.301500212022802e-06,4.345813067629933e-06,4.3871632442460395e-06,4.4254984459257685e-06,4.460771378944628e-06,4.492938842304284e-06,4.5219626372272614e-06,4.547808202914894e-06,4.570445071294671e-06,4.589847776514944e-06,4.605993126460817e-06,4.618863385985605e-06,4.62844309367938e-06,4.634721790353069e-06,4.637691290554358e-06,4.637347046809737e-06,4.633687694877153e-06,4.626715053746011e-06,4.616433670889819e-06,4.602851731760893e-06,4.585978331306251e-06,4.56582756669377e-06,4.542413989838678e-06,4.515755335887661e-06,4.485872523218859e-06,4.452787379705114e-06,4.416524916450726e-06,4.377111963549396e-06,4.334577170084231e-06,4.28895145887509e-06,4.240267571731238e-06,4.188560978946043e-06,4.133868515054928e-06,4.076228833582718e-06,4.0156824070436414e-06,3.952272436436033e-06,3.886043487000279e-06,3.817041942966171e-06,3.7453162349265767e-06,3.670916839837446e-06,3.593896508391481e-06,3.514309810270788e-06,3.4322131341468776e-06,3.3476651424280135e-06,3.2607265438855393e-06,3.1714600936538773e-06,3.0799310479778796e-06,2.986206482091802e-06,2.890355744966655e-06,2.7924502319365274e-06,2.692564066819614e-06,2.5907731924235122e-06,2.4871555979188997e-06,2.3817920009605587e-06,2.2747647108189994e-06,2.166158765248838e-06,2.0560610209940933e-06,1.944560381161864e-06,1.831748249969678e-06,1.7177173958771164e-06,1.6025627473936765e-06,1.4863810520182597e-06,1.369270989926008e-06,1.251332491847279e-06,1.132667080128158e-06,1.0133778687304584e-06,8.935689379541145e-07,7.733456754976942e-07,6.528141511807917e-07,5.320814580045408e-07,4.1125508687400725e-07,2.9044295501989836e-07,1.6975317862488737e-07,4.929390939878431e-08,-7.082694253313093e-08,-1.9050189337121992e-07,-3.096240845934517e-07,-4.2808750322365086e-07,-5.457872589431645e-07,-6.626197546211188e-07,-7.784829563206586e-07,-8.932765354074945e-07,-1.0069022664538352e-06,-1.1192638567081303e-06,-1.2302679124331917e-06,-1.3398232567851664e-06,-1.4478416687779827e-06,-1.554237996970187e-06,-1.6589303868386196e-06,-1.7618403944652528e-06,-1.8628931002240279e-06,-1.9620172224676935e-06,-2.059145572275156e-06,-2.1542150534514803e-06,-2.2471663214673754e-06,-2.337944806640735e-06,-2.4264995772682596e-06,-2.512785158614861e-06,-2.5967594865505816e-06,-2.67838572654e-06,-2.757631364147528e-06,-2.8344682050374104e-06,-2.9088728297210764e-06,-2.9808263661834644e-06,-3.0503144898830215e-06,-3.117326741630677e-06,-3.181857664458221e-06,-3.2439056667499244e-06,-3.3034734769898932e-06,-3.3605672342673643e-06,-3.4151976251450833e-06,-3.467378746790928e-06,-3.517128106977907e-06,-3.564466851457837e-06,-3.609418627092964e-06,-3.652010718724341e-06,-3.692272684929776e-06,-3.7302368127711816e-06,-3.7659374356735498e-06,-3.7994109334249515e-06,-3.830695732176537e-06,-3.8598313949478325e-06,-3.8868593037477694e-06,-3.911821295332629e-06,-3.934760115953395e-06,-3.955719421355752e-06,-3.974742867285386e-06,-3.991874109487981e-06,-4.007157258456573e-06,-4.020635060442146e-06,-4.032350716443034e-06,-4.042346063215518e-06,-4.050661118526477e-06,-4.057336809637491e-06,-4.062411335326033e-06,-4.0659210753801744e-06,-4.067901500093285e-06,-4.06838626076933e-06,-4.067407644470222e-06,-4.064994300279068e-06,-4.061174877278972e-06,-4.055974841321586e-06,-4.049417839269154e-06,-4.041524789499817e-06,-4.0323161556443665e-06,-4.021808308607433e-06,-4.010016709798947e-06,-3.996955001639435e-06,-3.9826340980653185e-06,-3.967063548770966e-06,-3.9502510844613425e-06,-3.9322030715993606e-06,-3.912924057658529e-06,-3.892416771122953e-06,-3.870684395224089e-06,-3.847727839456638e-06,-3.823547558567952e-06,-3.7981428704370046e-06,-3.771513775063795e-06,-3.743659362953622e-06,-3.714578951985459e-06,-3.6842723147856304e-06,-3.6527392239804612e-06,-3.6199808164383285e-06,-3.5859984564012848e-06,-3.5507953271007864e-06,-3.5143757486366667e-06,-3.4767451779771363e-06,-3.4379118005745113e-06,-3.3978853934968356e-06,-3.356677552801557e-06,-3.314303057777579e-06,-3.270778506703209e-06,-3.2261239084618865e-06,-3.1803615456738044e-06,-3.133517111564288e-06,-3.085619255216443e-06,-3.0367002636921825e-06,-2.9867951525375247e-06,-2.9359423479036195e-06,-2.884184368667775e-06,-2.831566462191404e-06,-2.7781377411884023e-06,-2.7239502742304467e-06,-2.669059995241696e-06,-2.6135260213777656e-06,-2.5574104256520513e-06,-2.500779146430432e-06,-2.44370039581554e-06,-2.38624534176779e-06,-2.3284885628527263e-06,-2.270506229251623e-06,-2.2123774670035345e-06,-2.154183675884269e-06,-2.096007392538013e-06,-2.037933427345706e-06,-1.980047954930342e-06,-1.922437832035939e-06,-1.8651911659617326e-06,-1.8083964050674695e-06,-1.7521421113997349e-06,-1.6965169606919517e-06,-1.6416089465565165e-06,-1.5875056078584748e-06,-1.5342931192208198e-06,-1.482056518398167e-06,-1.4308787967820535e-06,-1.38084124046145e-06,-1.3320222933543846e-06,-1.2844981256421306e-06,-1.2383417242745054e-06,-1.1936225519093568e-06,-1.1504066605994012e-06,-1.1087562370448723e-06,-1.068729261533008e-06,-1.0303790531906998e-06,-9.937546110450057e-07,-9.588998182152864e-07,-9.258534987566236e-07,-8.946493608164019e-07,-8.653154282001196e-07,-8.378743245884834e-07,-8.123429324768949e-07,-7.887322226451943e-07,-7.670474815313355e-07,-7.472878564840357e-07,-7.294467536667071e-07,-7.135114969969436e-07,-6.994634986767778e-07,-6.872783160360996e-07,-6.76925651532656e-07,-6.683694664388895e-07,-6.615682650590315e-07,-6.564749810422654e-07,-6.530371479129826e-07,-6.511974675049714e-07,-6.508935825877415e-07,-6.520584179270372e-07,-6.546206350321881e-07,-6.585045753126906e-07,-6.636308853558148e-07,-6.699165737700241e-07,-6.772752954020689e-07,-6.856179197711754e-07,-6.948527015993022e-07,-7.048856218716537e-07,-7.156207857406116e-07,-7.269608204296674e-07,-7.388071026070975e-07,-7.51060383663571e-07,-7.636209033989871e-07,-7.763889584566641e-07,-7.892651296970143e-07,-8.021507937883143e-07,-8.149483505803801e-07,-8.275617915387556e-07,-8.398966997447133e-07,-8.518610457031173e-07,-8.633650736555865e-07,-8.743220405449392e-07,-8.846482160151936e-07,-8.942633371589181e-07,-9.030907790474885e-07,-9.110578957916005e-07,-9.180963616017834e-07,-9.241421707884001e-07,-9.291359788221598e-07,-9.33023272864375e-07,-9.35754542297218e-07,-9.372855060973961e-07,-9.375769423058955e-07,-9.365952564621693e-07,-9.343120837002061e-07,-9.307047434958804e-07,-9.257558986064396e-07,-9.194538961310172e-07,-9.117925969803764e-07,-9.027713758769096e-07,-8.923950076678011e-07,-8.806737241684459e-07,-8.67623043632193e-07,-8.532634865332511e-07,-8.37620916627202e-07,-8.20725745143136e-07,-8.026133286875847e-07,-7.833235144971695e-07,-7.629004130649264e-07,-7.413922276100493e-07,-7.188511972344713e-07,-6.952639068913413e-07,-6.706897579533688e-07,-6.452493153119576e-07,-6.190120416249556e-07,-5.92058711390564e-07,-5.645653686769947e-07,-5.365002380131045e-07,-5.078057370155875e-07,-4.786189720107359e-07,-4.4914727936884447e-07,-4.193459517409792e-07,-3.8930568280193256e-07,-3.592145674247149e-07,-3.2919393788688467e-07,-2.992116208133666e-07,-2.6936103836305847e-07,-2.396075444721646e-07,-2.100385643188929e-07,-1.8078718255765125e-07,-1.51962808558892e-07,-1.2365828183646954e-07,-9.593659910933638e-08,-6.882996927970453e-08,-4.245545071057677e-08,-1.6938701108415444e-08,7.663759404863413e-09,3.145763116663147e-08,5.439692429831666e-08,7.637563470552777e-08,9.742820594738077e-08,1.1748028327929205e-07,1.3650789298935706e-07,1.5450224566393445e-07,1.713397494995661e-07,1.8699626025409088e-07,2.0144993584381155e-07,2.1462354027335095e-07,2.264713430122356e-07,2.369788916212201e-07,2.4610716309325653e-07,2.5363812028444954e-07,2.5952812165996875e-07,2.6437666633682966e-07,2.681161959117162e-07,2.706070461044874e-07,2.7193274831915915e-07,2.7219326170779823e-07,2.713832145673223e-07,2.6944260866912373e-07,2.663863369889441e-07,2.6222033966405434e-07,2.5686412641334755e-07,2.5026088223967236e-07,2.424229990083404e-07,2.3342063570908067e-07,2.234633456055235e-07,2.1264304450596683e-07,2.0087935581614147e-07,1.8824121639227087e-07,1.747822437891955e-07,1.6054964646627923e-07,1.4549827653809189e-07,1.297326832627732e-07,1.1329635185575171e-07,9.6208687239141e-08,7.851631522726166e-08,6.025871357451251e-08,4.1483659174446075e-08,2.2229887264302306e-08,2.54399057375565e-09,-1.760385437421519e-08,-3.8107195621250867e-08,-5.879521225438111e-08,-7.977254767865816e-08,-1.0105451053732395e-07,-1.2246690062056587e-07,-1.4398776215784892e-07,-1.6568313299103465e-07,-1.8753679853489302e-07,-2.0942603384810354e-07,-2.3130517945446627e-07"
csv_s_unhealthy = np.array(series_scotopic_patient.split(",")).astype("float")
times_s_unhealthy = np.arange(0.5, (len(csv_s_unhealthy) + 1) / 2, 0.5)
series_photopic_patient = "3.493658823572332e-06,3.382115210115444e-06,3.2639954952173866e-06,3.139530008411384e-06,3.0089818210399244e-06,2.8726469736284344e-06,2.7308540211379295e-06,2.583962668722961e-06,2.4323628622369142e-06,2.276472741868929e-06,2.116738414770225e-06,1.9536312265699962e-06,1.7876469655675464e-06,1.6193031342481845e-06,1.4491375850411714e-06,1.2777059055224527e-06,1.1055793720515794e-06,9.33342619191535e-07,7.615909680680488e-07,5.909281526328414e-07,4.2196353433610057e-07,2.55309430485795e-07,9.157856339925274e-08,-6.861890256004699e-08,-2.2467798999059596e-07,-3.760017079912359e-07,-5.220038588049647e-07,-6.621118018301786e-07,-7.957689831528114e-07,-9.224378914041154e-07,-1.0416023314974154e-06,-1.1527703236424713e-06,-1.2554762633953942e-06,-1.3492830248651444e-06,-1.4337849734147312e-06,-1.5086092162164277e-06,-1.573417989675363e-06,-1.6279105921057635e-06,-1.6718245205993298e-06,-1.7049377447619918e-06,-1.727069047774421e-06,-1.7380801864419482e-06,-1.7378761185682379e-06,-1.7264059124499909e-06,-1.703663542684808e-06,-1.6696880038580275e-06,-1.6245637652900768e-06,-1.5684203162891208e-06,-1.5014319387773867e-06,-1.423817707291164e-06,-1.3358403521124274e-06,-1.2378054634609725e-06,-1.1300605819997145e-06,-1.012993720905797e-06,-8.870320016285405e-07,-7.526399485868751e-07,-6.103177270233573e-07,-4.605991819062183e-07,-3.0404945050577226e-07,-1.412628876096278e-07,2.7139504865658637e-08,2.0051260207765154e-07,3.781898954002827e-07,5.594862386715249e-07,7.437007525368244e-07,9.301198815592215e-07,1.1180202363902936e-06,1.3066719475318678e-06,1.4953413938201265e-06,1.6832947267175769e-06,1.8698007124839933e-06,2.054134029094712e-06,2.2355784494720865e-06,2.413429228909081e-06,2.586996970421751e-06,2.7556104669201886e-06,2.9186185201979242e-06,3.0753944884054363e-06,3.225336740797502e-06,3.367873205206706e-06,3.5024620501644677e-06,3.6285955502535217e-06,3.745800540855271e-06,3.853641374007566e-06,3.951721737394109e-06,4.039684881718131e-06,4.117216121812817e-06,4.18404488300439e-06,4.239943336870056e-06,4.284728674974758e-06,4.318263108871179e-06,4.340454324847087e-06,4.351256393420044e-06,4.350667950347997e-06,4.338733106123982e-06,4.3155405364814214e-06,4.281223482394125e-06,4.235957476339536e-06,4.1799603422987275e-06,4.113489922019653e-06,4.036843165522441e-06,3.950354766857345e-06,3.854394890367985e-06,3.749366442207247e-06,3.635704842963605e-06,3.513873252813937e-06,3.3843627988972003e-06,3.2476873457198963e-06,3.104383495156071e-06,2.955005811600131e-06,2.8001252303511137e-06,2.640326329128584e-06,2.4762032353464747e-06,2.3083580344973598e-06,2.137397586920997e-06,1.963929889825522e-06,1.7885623719848809e-06,1.6118979146995116e-06,1.434532805433264e-06,1.257053554581944e-06,1.0800346217365586e-06,9.040356871992117e-07,7.295988098121597e-07,5.572466648118279e-07,3.874797869229951e-07,2.2077463768255257e-07,5.758172250125426e-08,-1.0167642017222533e-07,-2.5660679625616467e-07,-4.0684741975383076e-07,-5.520687977877969e-07,-6.919748898326361e-07,-8.263043014267168e-07,-9.548307389195543e-07,-1.0773641179184779e-06,-1.193750335914956e-06,-1.3038720680924598e-06,-1.4076484831093694e-06,-1.5050351294121356e-06,-1.5960237078616046e-06,-1.6806411622383166e-06,-1.7589494518688298e-06,-1.831044642131019e-06,-1.8970553128383472e-06,-1.9571418761188397e-06,-2.0114950984861935e-06,-2.060334509224049e-06,-2.103907036143937e-06,-2.142484390788013e-06,-2.1763623863080284e-06,-2.205858208981226e-06,-2.2313083718472626e-06,-2.2530666683451273e-06,-2.27150235332374e-06,-2.28699718718417e-06,-2.299943616890232e-06,-2.310741592737031e-06,-2.3197976588562597e-06,-2.327521315237391e-06,-2.334323198738275e-06,-2.3406125819747103e-06,-2.346794872210012e-06,-2.353270019739284e-06,-2.360429789405316e-06,-2.3686552594881505e-06,-2.378315684836707e-06,-2.389765995758353e-06,-2.4033442969084717e-06,-2.4193716399167897e-06,-2.4381490675295936e-06,-2.4599562493676785e-06,-2.4850512545526726e-06,-2.5136673684755806e-06,-2.5460137749178102e-06,-2.582273282314418e-06,-2.6226023237541085e-06,-2.667130047484534e-06,-2.715958089538617e-06,-2.7691589821188245e-06,-2.826778199960245e-06,-2.8888318865938345e-06,-2.9553086733358214e-06,-3.0261685424193274e-06,-3.101344418610097e-06,-3.1807426239538472e-06,-3.264242423028918e-06,-3.3516987514303764e-06,-3.4429413062753156e-06,-3.5377772746869596e-06,-3.635991561168339e-06,-3.7373483792180195e-06,-3.841592842945829e-06,-3.948452558688587e-06,-4.05763921662583e-06,-4.1688495002745185e-06,-4.281768269720487e-06,-4.3960690163658e-06,-4.511417046160204e-06,-4.627469934348483e-06,-4.7438811634492595e-06,-4.8602992137603e-06"
csv_p_unhealthy = np.array(series_photopic_patient.split(",")).astype("float")
times_p_unhealthy = np.arange(0.5, (len(csv_p_unhealthy) + 1) / 2, 0.5)


EEGHandler.beauty_plot(arrays=[csv_p_unhealthy, csv_s_unhealthy], times=[times_p_unhealthy, times_s_unhealthy],
                       titles=["Photopic Response", "Scotopic Response"]
                       , xlabel=EEGHandler.farsi_reshape("زمان (میلی ثانیه)"),
                       data_label="Sample 319, $\it{Pediatric}$ $\it{and}$ $\it{adults}$ $\it{ERG}$ Dataset",
                       suptitle=EEGHandler.farsi_reshape(" زمان (میلی ثانیه)") + r"\fontsize{30pt}Hello" , sup_fontfamily="B Nazanin")

############################ 4. Epilepsy
import pandas as pd

handler = EEGHandler(fs=256.0)
raw = handler.create_raw()

raw_mont = handler.create_montage()

tse_file = pd.read_csv(
    str("/run/media/cherry/New Volume/project/edf/dev/01_tcp_ar/085/00008512/s009_2012_07_04/00008512_s009_t001.tse_bi").replace(
        ".edf", ".tse"), delim_whitespace=True, index_col=False)
tse_file.rename(columns={'version': 'start', '=': 'end', 'tse_v1.0.0': 'event'}, inplace=True)

onset = []
duration = []
description = []
for i in range(tse_file.shape[0]):
    onset.append(tse_file.iloc[i]['start'])
    duration.append(tse_file.iloc[i]['end'] - tse_file.iloc[i]['start'])
    description.append(tse_file.iloc[i]['event'])
annot = mne.Annotations(onset=onset,  # in seconds
                        duration=duration,  # in seconds
                        description=description)
raw_mont.set_annotations(annot)

raw_mont.pick(["FP1-F3", "FP2-F4"]).plot()

######################## 5.Eye state


# arff from ... not used
# from scipy.io import arff
# import pandas as pd
#
# data = arff.loadarff('/home/cherry/Downloads/EEG Eye State.arff')
# df = pd.DataFrame(data[0])
#
# df.head()

import scipy.io
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.transforms as mtrans

labels = scipy.io.loadmat(
    '/run/media/cherry/C034E4D334E4CD8A/Users/PC/Desktop/prj/EOG_saccades/DATASET/S1/ControlSignal.mat')
# np.set_printoptions(threshold=1000)
labels = labels['ControlSignal'][0]

data = scipy.io.loadmat('/run/media/cherry/C034E4D334E4CD8A/Users/PC/Desktop/prj/EOG_saccades/DATASET/S1/EOG.mat')
data = data['EOG']

angles = scipy.io.loadmat(
    '/run/media/cherry/C034E4D334E4CD8A/Users/PC/Desktop/prj/EOG_saccades/DATASET/S1/TargetGA.mat')
angles = angles['TargetGA']

# extract ranges for highlighting
pos_1s = np.argwhere(labels == 1)
pos_2s = np.argwhere(labels == 2)
pos_3s = np.argwhere(labels == 3)
ranges_1 = []
ranges_2 = []
ranges_3 = []
start = 0
for i in range(1, len(pos_1s)):
    prev_pos = i - 1
    if pos_1s[i][0] - pos_1s[prev_pos][0] != 1:
        ranges_1.append([pos_1s[start][0], pos_1s[prev_pos][0]])
        start = i
    if i == len(pos_1s) - 1:
        ranges_1.append([pos_1s[start][0], pos_1s[i][0]])
start = 0
for i in range(1, len(pos_2s)):
    prev_pos = i - 1
    if pos_2s[i][0] - pos_2s[prev_pos][0] != 1:
        ranges_2.append([pos_2s[start][0], pos_2s[prev_pos][0]])
        start = i
    if i == len(pos_2s) - 1:
        ranges_2.append([pos_2s[start][0], pos_2s[i][0]])
start = 0
for i in range(1, len(pos_3s)):
    prev_pos = i - 1
    if pos_3s[i][0] - pos_3s[prev_pos][0] != 1:
        ranges_3.append([pos_3s[start][0], pos_3s[prev_pos][0]])
        start = i
    if i == len(pos_3s) - 1:
        ranges_3.append([pos_3s[start][0], pos_3s[i][0]])

# angles
angles_h = []
angles_v = []
for angle in angles:
    if angle[0] != 0.0:
        angles_h.append(angle[0])
    if angle[1] != 0.0:
        angles_v.append(angle[1])

# begin plotting
duration = 256 * 16
times = np.arange(0, len(data[0][:duration])) / 256.0
titles = ["Horizontal EOG", "Vertical EOG"]
xlabel = EEGHandler.farsi_reshape("زمان")
ylabel = EEGHandler.farsi_reshape("اندازه")
data_label = "db: saccades"

fig.suptitle("EOG", fontfamily="Roboto", fontsize=25, color="purple")
fig, axs = plt.subplots(2, squeeze=False)
for i in range(2):
    with plt.style.context("seaborn"):
        with plt.rc_context({'lines.linewidth': 1.2, 'lines.linestyle': '-', 'font.family': ["Roboto"],
                             'legend.frameon': True}):
            font = matplotlib.font_manager.FontProperties(family='Roboto',
                                                          weight='bold',
                                                          style='normal', size=10)
            axs.flat[i].plot(times, data[i][:duration], color="black")
            axs.flat[i].set_title(titles[i], fontsize=15, fontweight='bold', color="blue",
                                  pad=10)
            axs.flat[i].set_xlabel(xlabel, fontfamily="B Nazanin", fontsize=15, labelpad=10,
                                   color="green")
            axs.flat[i].set_ylabel(ylabel, fontfamily="B Nazanin", fontsize=15, labelpad=10,
                                   color="green")

            # axs.flat[i].set_ylim(ylims[i])
            # axs.flat[i].set_xlim(xlims[i])

            axs.flat[i].yaxis.set_major_formatter(matplotlib.ticker.ScalarFormatter(useMathText=True))
            axs.flat[i].annotate(data_label, xy=(times[0], 0), xytext=(1, 0), xycoords='data',
                                 textcoords='axes fraction',
                                 horizontalalignment='right', verticalalignment='bottom', fontsize=8)

            axvspan_num = 0
            for range1, range2, range3 in zip(ranges_1, ranges_2, ranges_3):
                print(((range2[1] - range1[0]) / 512))
                angle_annot_point =
                if not range1[0] < duration:
                    break
                if axvspan_num == 0:
                    axs.flat[i].axvspan(range1[0] / 256, range1[1] / 256, color="red", alpha=0.5,
                                        label="Forward Saccade")
                    axs.flat[i].axvspan(range2[0] / 256, range2[1] / 256, color="yellow", alpha=0.5,
                                        label="Return Saccade")
                    axs.flat[i].axvspan(range3[0] / 256, range3[1] / 256, color="blue", alpha=0.5, label="Blink")
                    axs.flat[i].annotate("%.2f" % angles_h[int(axvspan_num)], xy=(angle_annot_point, 0),
                                         xycoords='data',
                                         textcoords='axes fraction',
                                         horizontalalignment='right', verticalalignment='bottom', fontsize=8)
                    axvspan_num += 1
                else:
                    # https://stackoverflow.com/questions/44632903/setting-multiple-axvspan-labels-as-one-element-in-legend
                    axs.flat[i].axvspan(range1[0] / 256, range1[1] / 256, color="red", alpha=0.5,
                                        label="_Forward Saccade")
                    axs.flat[i].axvspan(range2[0] / 256, range2[1] / 256, color="yellow", alpha=0.5,
                                        label="_Return Saccade")
                    axs.flat[i].axvspan(range3[0] / 256, range3[1] / 256, color="blue", alpha=0.5, label="_Blink")
                    axs.flat[i].annotate("%.2f" % angles_h[int(axvspan_num)], xy=(angle_annot_point, 0),
                                         xycoords='data',
                                         textcoords='axes fraction',
                                         horizontalalignment='right', verticalalignment='bottom', fontsize=8)
                    axvspan_num += 1

            axs.flat[i].legend(prop=font, facecolor='white', framealpha=1)
fig.tight_layout()
# Get the bounding boxes of the axes including text decorations (https://stackoverflow.com/questions/26084231/draw-a-separator-or-lines-between-subplots)
r = fig.canvas.get_renderer()
get_bbox = lambda ax: ax.get_tightbbox(r).transformed(fig.transFigure.inverted())
bboxes = np.array(list(map(get_bbox, axs.flat)), mtrans.Bbox).reshape(axs.shape)
# Get the minimum and maximum extent, get the coordinate half-way between those
ymax = np.array(list(map(lambda b: b.y1, bboxes.flat))).reshape(axs.shape).max(axis=1)
ymin = np.array(list(map(lambda b: b.y0, bboxes.flat))).reshape(axs.shape).min(axis=1)
ys = np.c_[ymax[1:], ymin[:-1]].mean(axis=1)
# Draw a horizontal lines at those coordinates
for y in ys:
    line = plt.Line2D([0, 1], [y, y], transform=fig.transFigure, color="black", linestyle="dotted")
    fig.add_artist(line)

(range1[1] / 256 - range1[0] / 256) / 2

np.max(angles_v)

plt.plot(data[1][:12 * 256])

############################## 6. EMG creation

import neurokit2 as nk

# Generate 10 seconds of EMG signal (recorded at 250 samples / second)
emg = nk.emg_simulate(duration=100, sampling_rate=250, burst_number=15)

# Process it
signals, info = nk.emg_process(emg, sampling_rate=250)

# Visualise the processing
nk.emg_plot(signals, sampling_rate=250)

##############################  7. HD-sEMG with wfdb

import wfdb
import scipy.signal
import numpy as np
import matplotlib.pyplot as plt

emg_ch0_rec = wfdb.rdrecord('/home/cherry/Downloads/mvc_raw_finger1_flexion', channels=[0])

wfdb.plot_items(signal=emg_ch0_rec.p_signal, )

emg_ch0_arr = emg_ch0_rec.p_signal

# butterworth
butterworth_N = 8
butterworth_wn = 0.02
numerator, denumerator = scipy.signal.butter(butterworth_N, butterworth_wn, output='ba')
emg_ch0_butter = scipy.signal.filtfilt(numerator, denumerator, emg_ch0_arr, method="gust")

# bpf with scipy.butter
b, a = scipy.signal.butter(8, [1, 512], fs=2048, btype='band')
emg_ch0_bpf = scipy.signal.lfilter(b, a, data)

# averaging

emg_patch1_first_row_rec = wfdb.rdrecord('/home/cherry/Downloads/mvc_raw_finger1_flexion',
                                         channels=[i for i in range(8)])
emg_patch1_first_row_avg = np.mean(emg_patch1_first_row_rec.p_signal, axis=1)

emg_patch1_last_row_rec = wfdb.rdrecord('/home/cherry/Downloads/mvc_raw_finger1_flexion',
                                        channels=[i for i in range(56, 64)])
emg_patch1_last_row_avg = np.mean(emg_patch1_last_row_rec.p_signal, axis=1)

emg_patch1_mid_row_rec = wfdb.rdrecord('/home/cherry/Downloads/mvc_raw_finger1_flexion',
                                       channels=[i for i in range(24, 40)])
emg_patch1_mid_row_avg = np.mean(emg_patch1_mid_row_rec.p_signal, axis=1)

plt.plot(emg_patch1_first_row_avg)
plt.plot(emg_patch1_last_row_avg)
plt.plot(emg_patch1_mid_row_avg)

###################### 8. more preprocessing illustrations

# bandstop and notch

import matplotlib
import matplotlib.pyplot as plt
import scipy.signal
#matplotlib.use('Qt5Agg')
import numpy as np


### bpf
fs = 256.0
low_freq =40.0
high_freq = 80.0

# General
# numerator, denumerator = scipy.signal.butter(order, [low_freq, high_freq], fs=fs, btype='band')
# y = scipy.signal.lfilter(numerator, denumerator, data)

plt.figure(1)
plt.clf()
for order in [1, 2, 4]:
    numerator, denumerator = scipy.signal.butter(order, [low_freq, high_freq], fs=fs, btype='band')
    w, spect_amp = scipy.signal.freqz(numerator, denumerator, fs=fs)
    plt.plot(w, abs(spect_amp), label=EEGHandler.farsi_reshape("مرتبه") + " = %d" % order)

plt.xlabel('Frequency (Hz)')
plt.ylabel('Gain')
plt.grid(True)


plt.plot([0, 0.5 * fs], [np.sqrt(0.5), np.sqrt(0.5)], linestyle='--', label=EEGHandler.farsi_reshape("تضعیف گین"))

ideal = np.linspace(0, 0.5*fs, len(w))
mask = (ideal <=high_freq) & (ideal >=low_freq)
ideal = np.where(mask, 1, 0)

plt.plot(w, ideal, linestyle='--', label=EEGHandler.farsi_reshape("فیلتر ایده آل"),color='black')

plt.xlabel('Frequency (Hz)')
plt.ylabel('Gain')
plt.grid(True)
plt.suptitle(EEGHandler.farsi_reshape("فیلتر میان گذر (40 تا 80 هرتز) باترورث"), fontfamily="B Nazanin", fontsize=25, color="#2d1754")
font = matplotlib.font_manager.FontProperties(family='B Nazanin',
                                              weight='bold',
                                              style='normal', size=14)
plt.legend(prop=font, facecolor='white', framealpha=1)

matplotlib.rc('text', usetex=False)
matplotlib.rcParams['text.latex.preamble']=[r"\usepackage{amsmath}"]

# plt.annotate(r'$\mathbf{w_c}$', xy=(high_freq, 0), xytext=(high_freq,-0.075),horizontalalignment='center', verticalalignment='center', fontsize=12,weight='bold')
plt.annotate(r'$\mathbf{\sqrt{0.5}}$', xy=(0, np.sqrt(0.5)), xytext=(-9.3,np.sqrt(0.5)),horizontalalignment='center', verticalalignment='center', fontsize=12,weight='bold')







### lpf
fs = 256.0
high_freq = 30


# Plot the frequency response for a few different orders.
plt.figure(1)
plt.clf()
for order in [3, 6, 9]:
    numerator, denumerator = scipy.signal.butter(order, high_freq, fs=fs, btype='low')
    w, spect_amp = scipy.signal.freqz(numerator, denumerator, fs=fs, worN=2000)
    plt.plot(w, abs(spect_amp), label=EEGHandler.farsi_reshape("مرتبه") + " = %d" % order)

# plt.plot([0, 0.5 * fs], [np.sqrt(0.5), np.sqrt(0.5)],
#          '--', label='sqrt(0.5)')

plt.plot([0, 0.5 * fs], [np.sqrt(0.5), np.sqrt(0.5)], linestyle='--', label=EEGHandler.farsi_reshape("تضعیف گین"))

ideal = np.linspace(0, 0.5*fs, len(w))
mask = (ideal <=high_freq)
ideal = np.where(mask, 1, 0)

plt.plot(w, ideal, linestyle='--', label=EEGHandler.farsi_reshape("فیلتر ایده آل"),color='black')

plt.xlabel('Frequency (Hz)')
plt.ylabel('Gain')
plt.grid(True)
plt.suptitle(EEGHandler.farsi_reshape("فیلتر پایین گذر (30 هرتز) باترورث"), fontfamily="B Nazanin", fontsize=25, color="#2d1754")
font = matplotlib.font_manager.FontProperties(family='B Nazanin',
                                              weight='bold',
                                              style='normal', size=14)
plt.legend(prop=font, facecolor='white', framealpha=1)

matplotlib.rc('text', usetex=False)
matplotlib.rcParams['text.latex.preamble']=[r"\usepackage{amsmath}"]

plt.annotate(r'$\mathbf{f_c}$', xy=(high_freq, 0), xytext=(high_freq,-0.075),horizontalalignment='center', verticalalignment='center', fontsize=12,weight='bold')
plt.annotate(r'$\mathbf{\sqrt{0.5}}$', xy=(0, np.sqrt(0.5)), xytext=(-9.3,np.sqrt(0.5)),horizontalalignment='center', verticalalignment='center', fontsize=12,weight='bold')





### hpf
fs = 256.0
low_freq = 80.0

# Plot the frequency response for a few different orders.
plt.figure(1)
plt.clf()
for order in [3, 6, 9]:
    numerator, denumerator = scipy.signal.butter(order, low_freq, fs=fs, btype='high')
    w, spect_amp = scipy.signal.freqz(numerator, denumerator, fs=fs, worN=2000)
    plt.plot(w, abs(spect_amp), label=EEGHandler.farsi_reshape("مرتبه") + " = %d" % order)

# plt.plot([0, 0.5 * fs], [np.sqrt(0.5), np.sqrt(0.5)],
#          '--', label='sqrt(0.5)')

plt.xlabel('Frequency (Hz)')
plt.ylabel('Gain')
plt.grid(True)


plt.plot([0, 0.5 * fs], [np.sqrt(0.5), np.sqrt(0.5)], linestyle='--', label=EEGHandler.farsi_reshape("تضعیف گین"))

ideal = np.linspace(0, 0.5*fs, len(w))
mask = (ideal >= low_freq)
ideal = np.where(mask, 1, 0)

plt.plot(w, ideal, linestyle='--', label=EEGHandler.farsi_reshape("فیلتر ایده آل"), color='black')

plt.xlabel('Frequency (Hz)')
plt.ylabel('Gain')
plt.grid(True)
plt.suptitle(EEGHandler.farsi_reshape("فیلتر بالا گذر (80 هرتز) باترورث"), fontfamily="B Nazanin", fontsize=25, color="#2d1754")
font = matplotlib.font_manager.FontProperties(family='B Nazanin',
                                              weight='bold',
                                              style='normal', size=14)
plt.legend(prop=font, facecolor='white', framealpha=1)

matplotlib.rc('text', usetex=False)
matplotlib.rcParams['text.latex.preamble']=[r"\usepackage{amsmath}"]

plt.annotate(r'$\mathbf{ = f_c}$', xy=(low_freq, 0), xytext=(low_freq,-0.11),horizontalalignment='center', verticalalignment='center', fontsize=12,weight='bold')
plt.annotate(r'$\mathbf{\sqrt{0.5}}$', xy=(0, np.sqrt(0.5)), xytext=(-9.3,np.sqrt(0.5)),horizontalalignment='center', verticalalignment='center', fontsize=12,weight='bold')


## smooth method_2

array = EEGHandler().create_raw()[0][0][0][256*20:256*40]
n = len(array)
smoothed_array = [None] * n
k = 100
for i in range(k,n-k):
    smoothed_array[i-1] = np.mean(array[i-k:i+k+1])
# smoothed_signal = [x for x in smoothed_signal if x is not None]

plt.plot(array, label=EEGHandler.farsi_reshape("داده اصلی"),linewidth=1)
plt.plot(smoothed_array, label=EEGHandler.farsi_reshape("داده هموار شده"), linestyle="-",linewidth=3)

plt.suptitle(EEGHandler.farsi_reshape("روش میانگین متحرک"), fontfamily="B Nazanin", fontsize=22, color="#2d1754", y=0.9)
font = matplotlib.font_manager.FontProperties(family='B Nazanin',
                                              weight='bold',
                                              style='normal', size=12)
plt.legend(prop=font, facecolor='white', framealpha=1)
plt.xlabel(EEGHandler.farsi_reshape("شماره نمونه"), font="B Nazanin", fontsize=12)
plt.ylabel(EEGHandler.farsi_reshape("اندازه نمونه"),  font="B Nazanin", fontsize=12)
plt.tight_layout()

## PSD

raw = EEGHandler().create_raw().pick(4)
# raw.plot()
raw_notch50 = raw.copy().notch_filter(60)

fig, ax = plt.subplots(1)
raw.plot_psd(fmax=110, ax=ax)
plt.suptitle(EEGHandler.farsi_reshape("چگالی طیفی توان، قبل از اعمال فیلتر ناچ"), fontfamily="B Nazanin", fontsize=22, color="#2d1754", y=0.95)

fig2, ax2 = plt.subplots(1)
raw_notch50.plot_psd(fmax=110, ax=ax2)
plt.suptitle(EEGHandler.farsi_reshape("چگالی طیفی توان، بعد از اعمال فیلتر ناچ در 60 هرتز"), fontfamily="B Nazanin", fontsize=22, color="#2d1754", y=0.95)

### Center and Unit-v

arr1 = np.random.random_sample(50)
# arr1_norm = (preprocessing.scale(arr1))

centered = (arr1-np.mean(arr1))

plt.plot(arr1, label = EEGHandler.farsi_reshape("داده اصلی"))
plt.plot(centered, label = EEGHandler.farsi_reshape("داده مرکزی‌سازی شده"))
font = matplotlib.font_manager.FontProperties(family='B Nazanin',
                                              weight='bold',
                                              style='normal', size=12)
# plt.plot([-50,50], [0,0], linestyle='--',color='black')
plt.axhline(0, linestyle="--", color='black')
plt.legend(prop=font, facecolor='white', framealpha=1)
plt.xlabel(EEGHandler.farsi_reshape("شماره نمونه"), font="B Nazanin", fontsize=12)
plt.ylabel(EEGHandler.farsi_reshape("اندازه نمونه"),  font="B Nazanin", fontsize=12)
plt.tight_layout()


arr1 = np.random.uniform(-1,8,50)
centered = (arr1-np.mean(arr1))
unit_var = centered/np.std(arr1-np.mean(arr1))

plt.plot(arr1, label = EEGHandler.farsi_reshape("داده اصلی"))
plt.plot(unit_var, label = EEGHandler.farsi_reshape("داده نرمال شده (واریانس واحد)"))
font = matplotlib.font_manager.FontProperties(family='B Nazanin',
                                              weight='bold',
                                              style='normal', size=12)
# plt.plot([-50,50], [0,0], linestyle='--',color='black')
plt.axhline(np.max(unit_var), linestyle="--", color='black', linewidth=0.7)
plt.axhline(np.min(unit_var), linestyle="--", color='black', linewidth=0.7)
plt.legend(prop=font, facecolor='white', framealpha=1)
plt.xlabel(EEGHandler.farsi_reshape("شماره نمونه"), font="B Nazanin", fontsize=12)
plt.ylabel(EEGHandler.farsi_reshape("اندازه نمونه"),  font="B Nazanin", fontsize=12)
plt.tight_layout()






####################### 9.